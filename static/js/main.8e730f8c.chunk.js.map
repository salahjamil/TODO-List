{"version":3,"sources":["logo.svg","Listitems.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Listitems","props","listitems","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","onClick","deleteItem","App","state","currentItem","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","newItems","filteredItems","filter","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,gLC4B5BC,MAzBf,SAAmBC,GACf,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GAE5B,OAAO,yBAAKC,UAAU,OAAOC,IAAI,YAErC,2BACI,2BAAOC,KAAK,OACZC,GAAIJ,EAAKE,IACTG,MAAOL,EAAKM,KACZC,SACI,SAACC,GACGZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAOL,EAAKE,QAIjD,0BAAMS,QAAU,kBAAMf,EAAMgB,WAAWZ,EAAKE,OAA5C,OAVA,SAcI,OACA,iCAAOL,IC4EIgB,E,kDA7Ff,WAAYjB,GAAO,IAAD,8BAClB,cAAMA,IACDkB,MAAM,CACXhB,MAAM,GACNiB,YAAY,CACZT,KAAK,GACLJ,IAAI,KAMJ,EAAKc,YAAa,EAAKA,YAAYC,KAAjB,gBAClB,EAAKC,QAAS,EAAKA,QAAQD,KAAb,gBACd,EAAKL,WAAY,EAAKA,WAAWK,KAAhB,gBACjB,EAAKR,UAAW,EAAKA,UAAUQ,KAAf,gBAfE,E,wDAoBNT,GACZW,KAAKC,SACH,CACEL,YAAY,CACVT,KAAME,EAAEE,OAAOL,MACfH,IAAImB,KAAKC,W,8BAMPd,GACRA,EAAEe,iBACF,IAAMC,EAAUL,KAAKL,MAAMC,YAC3B,GAAa,KAAVS,EAAa,CAChB,IAAMC,EAAS,GAAD,mBAAKN,KAAKL,MAAMhB,OAAhB,CAAuB0B,IACrCL,KAAKC,SACH,CACEtB,MAAM2B,EACNV,YAAY,CACVT,KAAK,GACLJ,IAAI,S,iCASCA,GACT,IAAMwB,EAAgBP,KAAKL,MAAMhB,MAAM6B,QAAO,SAAA3B,GAAI,OAAIA,EAAKE,MAAMA,KACjEiB,KAAKC,SAAS,CACdtB,MAAM4B,M,gCAKIpB,EAAKJ,GACb,IAAMJ,EAAOqB,KAAKL,MAAMhB,MACxBA,EAAMC,KAAI,SAAAC,GACLA,EAAKE,MAAMA,IACZF,EAAKM,KAAKA,MAGlBa,KAAKC,SAAS,CACZtB,MAAMA,M,+BAKR,OAEE,yBAAKG,UAAU,OACb,gCACE,0BAAMG,GAAG,aAAawB,SAAUT,KAAKD,SACnC,2BAAOf,KAAK,OAAO0B,YAAY,aAAaxB,MAAOc,KAAKL,MAAMC,YAAYT,KAC1EC,SAAUY,KAAKH,cACf,4BAAQb,KAAK,UAAb,WAGF,kBAAC,EAAD,CAAWL,MAASqB,KAAKL,MAAMhB,MAC/Bc,WAAcO,KAAKP,WACnBH,UAAaU,KAAKV,iB,GApFNqB,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8e730f8c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './Listitem.css';\r\n\r\nfunction Listitems(props){\r\n    const items = props.items;\r\n    const listitems = items.map(item =>\r\n{\r\n    return <div className=\"list\" key=\"item.key\">\r\n\r\n<p>\r\n    <input type=\"text\"\r\n    id={item.key}\r\n    value={item.text}\r\n    onChange = {\r\n        (e) =>{\r\n            props.setUpdate(e.target.value, item.key)\r\n        }\r\n    }/>\r\n\r\n<span onClick={ () => props.deleteItem(item.key)}> x </span> </p>\r\n        </div>\r\n}\r\n    )\r\n    return(\r\n    <div> {listitems}</div>\r\n    )\r\n}\r\n\r\nexport default Listitems","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Listitems from './Listitems'\n\n\nclass App extends React.Component{\nconstructor(props){\nsuper(props);\nthis.state={\nitems:[],\ncurrentItem:{\ntext:'',\nkey:''\n\n}\n\n}\n\nthis.handleInput= this.handleInput.bind(this);\nthis.addItem= this.addItem.bind(this);\nthis.deleteItem= this.deleteItem.bind(this);\nthis.setUpdate= this.setUpdate.bind(this);\n\n\n}\n\nhandleInput(e){\nthis.setState(\n  {\n    currentItem:{\n      text: e.target.value,\n      key:Date.now()\n\n    }\n  }\n)}\n\naddItem(e){\ne.preventDefault();\nconst newItem = this.state.currentItem;\nif(newItem!==\"\"){\nconst newItems=[...this.state.items, newItem];\nthis.setState(\n  {\n    items:newItems,\n    currentItem:{\n      text:'',\n      key:''\n    }\n  }\n)\n\n}\n\n}\n\ndeleteItem(key){\n  const filteredItems = this.state.items.filter(item => item.key!==key);\n  this.setState({\n  items:filteredItems\n  });\n  \n  }\n\n  setUpdate(text,key){\n    const items =this.state.items;\n    items.map(item =>{\n      if(item.key===key){\n        item.text=text;\n      }\n    })\nthis.setState({\n  items:items\n})\n  }\n\nrender(){\nreturn(\n\n  <div className=\"App\">\n    <header>\n      <form id=\"to-do-form\" onSubmit={this.addItem}>\n        <input type=\"text\" placeholder=\"Enter Task\" value={this.state.currentItem.text} \n        onChange={this.handleInput}/>\n        <button type=\"submit\"> Add </button>\n        </form>\n      </header>\n      <Listitems items = {this.state.items}\n      deleteItem = {this.deleteItem}\n      setUpdate = {this.setUpdate}\n      ></Listitems>\n    </div>\n\n);\n\n}\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}